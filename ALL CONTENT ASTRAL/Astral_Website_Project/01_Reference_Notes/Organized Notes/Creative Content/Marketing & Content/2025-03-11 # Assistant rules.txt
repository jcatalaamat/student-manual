# Assistant rulesPlease ask questions to clarify requirements.Please ask questions rather than making assumptions.Please ensure that you are familiar with coding standards and naming conventions before you write code.# Code reviewPlease review your own code after you have written it. Ask whether it conforms to the required rules and standards.# Technology stack- Framework: Next.js (React), version 12- Language: Javascript- Design Library: Ant Design# ArchitectureWe use atomic design principles for organising components.## Atoms- What: smallest units of UI, e.g. Button, Input, Label. folder.- Where: components/atoms/[type]- Notes: Atoms should generally have no state - they are purely presentational.## Molecules- What: combinations of atoms, e.g. SearchBar, UserMenu.- Where: components/molecules/[type]- Notes: Molecules may have state - they are used to build more complex components. They should not have any external effects (e.g. API calls) or domain logic.## Organisms- What: combinations of molecules and atoms, e.g. MainNavigation, UserMenu.- Where: components/organisms/[domain]- Notes: Organisms may have state and external effects. They are the highest order component below pages.Organisms may become quite complex. Please adopt a strict policy of separation of concerns.- State and domain logic should be handled in a hook file, stored relative to the hook in a ./hooks subfolder.- API logic should be handled separately, in a ./graphql subfolder. Queries and mutations are defined in their own files in this directory and an api.js file defines apollo hooks for each.- Subcomponents that are domain specific (i.e. not molecules) should be stored in a ./components subfolder.Where hook logic is required by several organisms, create a context. Contexts can be stored in a ./contexts subfolder.## Layouts- What: layouts are the layout for each page. They are stored in the components/layouts folder.- Where: components/layouts/[name]Routing is done by convention. Pages, the entry point for each route, are stored in the pages folder. The folder structure mirrors the route path.# Coding processPlease respond initially with a concise plan that summarises the files you need to change and the changes you need to make. I can review that plan and provide feedback before you start coding.# Coding standards- New features should be behind a feature flag unless they are a fix an existing bug- Prefer small, named functions over comments in larger functions- Keep validation minimal and use built-in when possible- One operation per GraphQL file- Default to simple solutions first- Use standard hook naming (useX)- Export hooks as a single object# Reference examplesSee `.cursor/examples/` for:- .cursor/examples/api.js: Standard API hook patterns- .cursor/examples/hook.js: Component logic patterns- .cursor/snippets/FeatureFlag.snippet: Feature flag implementation# Organization Example```components/organisms/users/list/├── graphql/│   ├── GET_USERS.graphql        # Individual query file│   ├── UPDATE_USER.graphql      # Individual mutation file│   ├── DELETE_USER.graphql      # Individual mutation file│   └── api.js                   # Apollo hooks that import .graphql files```