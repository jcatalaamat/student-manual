using Hostology.ApiTests.Framework;using System.Security.Claims;using System.Threading.Tasks;using Hostology.GraphQL.API.Documents;using Hostology.Shared.Enums;using Hostology.GraphQL.API.PdfDocument;using System.Linq;namespace Hostology.ApiTests.Api.Docs{    public class DocumentsApi    {        private readonly IGraphQLClient _graphql;        private readonly ClaimsPrincipal _user;        public DocumentsApi(ApiTestFixture fixture, ClaimsPrincipal user)        {            _graphql = fixture.CreateGraphQLClient();            _user = user;        }        public async Task&ltstring&gt GetDocumentUrl(            int eventId,            HostologyRole? role,            HostologyDocument docName,            HostologyDocumentFormat format,            SupplementaryDocumentDataInputType supplementaryInformation)        {            var inputs = new GraphQLInputs            {                { &quoteventId&quot, _graphql.EncodeId(eventId) },                { &quotdocumentName&quot, docName },                { &quotdocumentFormat&quot, format },            };            if (role != null)            {                inputs[&quotrole&quot] = role;            }            if (supplementaryInformation != null)            {                inputs[&quotsupplementaryData&quot] = supplementaryInformation;            }            var result = await _graphql.ExecuteFromFileAsync(&quotGetDocumentUrl.graphql&quot, inputs, _user);            return await result.ParseDataAsync&ltstring&gt(&quotdoc&quot, _graphql.DecodeId, &quotid&quot);        }        public async Task&ltstring&gt GetDocumentDataSetUrl(            HostologyDataSet dataSet,            GetDocumentDataSetInputType filter)        {            var inputs = new GraphQLInputs            {                { &quotdataSet&quot, dataSet },                { &quotfilter&quot, new GraphQLInputs                    {                        { &quotvenueId&quot, _graphql.EncodeId(filter.VenueId) },                        { &quotstartDate&quot, filter.StartDate },                        { &quotendDate&quot, filter.EndDate },                        { &quotstatusIds&quot, filter.StatusIds.Select(_graphql.EncodeId) },                        { &quotcategoryIds&quot, filter.CategoryIds.Select(_graphql.EncodeId) },                        { &quotkeyword&quot, filter.Keyword }                    }                }            };            var result = await _graphql.ExecuteFromFileAsync(&quotGetDocumentDataSetUrl.graphql&quot, inputs, _user);            return await result.ParseDataAsync&ltstring&gt(&quotdoc&quot);        }    }}