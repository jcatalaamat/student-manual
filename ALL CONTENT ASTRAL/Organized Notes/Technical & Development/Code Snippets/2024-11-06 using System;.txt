using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using FluentAssertions;using Hostology.ApiTests.Api.Docs;using Hostology.ApiTests.Api.Events;using Hostology.ApiTests.Api.Opportunities;using Hostology.ApiTests.Framework;using Hostology.Domain.Dtos.Pdfs;using Hostology.GraphQL.API.Documents;using Hostology.GraphQL.API.PdfDocument;using Hostology.Shared.Enums;using Xunit;namespace Hostology.ApiTests.WorkflowTests.Documents{    [Collection(&quotApiTest&quot)]    public class DocumentTests : DefaultTestFixture    {        public DocumentTests(ApiTestFixture fixture) : base(fixture)        {        }        [Theory]        [InlineData(            null,            HostologyDocument.CustomerItinerary,            HostologyDocumentFormat.Pdf,            null,            &quot/customer/itinerary/pdf&quot        )]        [InlineData(            HostologyRole.Customer,            HostologyDocument.GuestList,            HostologyDocumentFormat.Pdf,            null,            &quot/customer/guest-list/pdf&quot        )]        [InlineData(            HostologyRole.Client,            HostologyDocument.ChefSheet,            HostologyDocumentFormat.Pdf,            null,            &quot/client/chef-sheet/pdf&quot        )]        [InlineData(            HostologyRole.Client,            HostologyDocument.Itinerary,            HostologyDocumentFormat.Pdf,            new[] { ProjectPlanPdfSection.Itinerary, ProjectPlanPdfSection.EventAddons, ProjectPlanPdfSection.Accommodation },            &quot/client/itinerary/pdf?sections=196&quot        )]        public async Task GetDocumentUrl_ReturnsCorrectUrl(            HostologyRole? role, HostologyDocument doc, HostologyDocumentFormat format, ProjectPlanPdfSection[] sections, string relativeUrl)        {            // arrange            var newEvent = await GlobalTestSeeder.GetNewEventFromDefaultVenue();            var documentsApi = new DocumentsApi(Fixture, GlobalTestSeeder.GetDefaultVenueAdminPrincipal());            var eventsApi = new EventsApi(Fixture, GlobalTestSeeder.GetDefaultVenueAdminPrincipal());            var domain = &quothttp://localhost:3000/docs"            var supplementaryInformation = new SupplementaryDocumentDataInputType            {                ProjectPlanSections = sections?.ToList()            };            // act            var url = await documentsApi.GetDocumentUrl(newEvent.Id, role, doc, format, supplementaryInformation);            // assert            // Currently no way to get the GUID from the API without direct access to the database - this is fine for now.            url.Should().StartWith(domain);            url.Should().EndWith(relativeUrl);        }        public async Task GetDocumentDataSetUrl_ReturnsCorrectUrl()        {            // arrange            var documentsApi = new DocumentsApi(Fixture, GlobalTestSeeder.GetDefaultVenueAdminPrincipal());            var domain = &quothttp://localhost:32081/data/"            var filter = new GetDocumentDataSetInputType            {                StartDate = DateTime.Now.AddDays(-1),                EndDate = DateTime.Now,            };            // act            var url = await documentsApi.GetDocumentDataSetUrl(HostologyDataSet.Opportunities, filter);            // assert            url.Should().StartWith(domain);            url.Should().EndWith(&quot/data/client/opportunities/csv?startDate=2021-09-01T00%3A00%3A00&ampendDate=2021-09-01T00%3A00%3A00&ampstatusIds=1&ampstatusIds=2&ampcategoryIds=1&ampcategoryIds=2&ampkeyword=keyword&quot);        }    }}