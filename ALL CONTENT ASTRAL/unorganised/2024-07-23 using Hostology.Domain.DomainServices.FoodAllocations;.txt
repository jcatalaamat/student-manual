using Hostology.Domain.DomainServices.FoodAllocations;using Hostology.Domain.Util.Queryable;using Hostology.Infrastructure.DataAccess;using Hostology.Infrastructure.EntityFramework;using Hostology.Infrastructure.EntityFramework.Entities;using Hostology.Shared.Flags;using Microsoft.EntityFrameworkCore;namespace Hostology.Domain.DomainServices.FoodItems;internal class QueryGetAvailableIndividualFoodItemsByItineraryItemId : IDataQuery&ltItineraryAvailableFoodQueryItem&gt{    private readonly IFeatureFlagService _featureFlags;    private readonly int _itineraryItemId;    public QueryGetAvailableIndividualFoodItemsByItineraryItemId(int itineraryItemId)    {        _featureFlags = ServiceLocator.GetScopedService&ltIFeatureFlagService&gt();        _itineraryItemId = itineraryItemId;    }    public IQueryable&ltItineraryAvailableFoodQueryItem&gt GetQueryable(DbContext dbContext)    {        if (_featureFlags.GetTreatment(FeatureFlags.MenusDateRangeEnabled)) {            return GetQueryableV2(dbContext);        }        return GetQueryableV1(dbContext);    }    private IQueryable&ltItineraryAvailableFoodQueryItem&gt GetQueryableV2(DbContext dbContext) {        var itineraryItemDate = dbContext.Set&ltItineraryItem&gt()            .Where(item =&gt item.Id == _itineraryItemId)            .Select(item =&gt item.ItineraryDay.DayDate)            .FirstOrDefault();                var baseQuery = dbContext.Set&ltMenu&gt()            .Where(menu =&gt !menu.IsDeleted)            .Where(menu =&gt                 (!menu.AvailableFrom.HasValue &amp&amp !menu.AvailableTo.HasValue) ||                (menu.AvailableFrom.HasValue &amp&amp menu.AvailableTo.HasValue &amp&amp                 itineraryItemDate &gt= menu.AvailableFrom.Value &amp&amp                 itineraryItemDate &lt= menu.AvailableTo.Value));                var queryFoodAllocation = dbContext.Set&ltFoodAllocation&gt()            .Where(allocation =&gt allocation.ItineraryItemId == _itineraryItemId)            .FilterIndividualFoodItems();        var filteredFoodItems = baseQuery            .SelectMany(menu =&gt menu.FoodItemMenus)            .FilterByItineraryItemVenue(                dbContext,                _itineraryItemId,                food =&gt food.FoodItem.VenueId!.Value            );        var query = filteredFoodItems            .FilterByItineraryItemVenue(                dbContext,                _itineraryItemId,                food =&gt food.FoodItem.VenueId!.Value            )            // Left join FoodAllocation by using GroupJoin + SelectMany[DefaultIfEmpty]            .GroupJoin(queryFoodAllocation,                food =&gt food.FoodItem.Id,                allocation =&gt allocation.FoodItemId,                (food, foodAllocations) =&gt new { food, foodAllocations })            .SelectMany(                join =&gt join.foodAllocations.DefaultIfEmpty(),                (join, allocation) =&gt new { join.food, allocation }            )            // Select query item to be returned            .Select(join =&gt new ItineraryAvailableFoodQueryItem            {                FoodItem = join.food.FoodItem,                Allocation = join.allocation,            });        var ordered = query            .OrderBy(item =&gt item.FoodItem.FoodCourseId)            .ThenBy(item =&gt item.FoodItem.Name);        return ordered;    }    private IQueryable&ltItineraryAvailableFoodQueryItem&gt GetQueryableV1(DbContext dbContext) {         var queryFoodAllocation = dbContext.Set&ltFoodAllocation&gt()            .Where(allocation =&gt allocation.ItineraryItemId == _itineraryItemId)            .FilterIndividualFoodItems();        var query = dbContext.Set&ltFoodItem&gt()            .FilterByItineraryItemVenue(                dbContext,                _itineraryItemId,                food =&gt food.VenueId!.Value            )            // Left join FoodAllocation by using GroupJoin + SelectMany[DefaultIfEmpty]            .GroupJoin(queryFoodAllocation,                food =&gt food.Id,                allocation =&gt allocation.FoodItemId,                (food, foodAllocations) =&gt new { food, foodAllocations })            .SelectMany(                join =&gt join.foodAllocations.DefaultIfEmpty(),                (join, allocation) =&gt new { join.food, allocation }            )            // Select query item to be returned            .Select(join =&gt new ItineraryAvailableFoodQueryItem            {                FoodItem = join.food,                Allocation = join.allocation,            });        var ordered = query            .OrderBy(item =&gt item.FoodItem.FoodCourseId)            .ThenBy(item =&gt item.FoodItem.Name);        return ordered;    }}